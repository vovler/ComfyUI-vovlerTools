[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "comfyui-vovlertools"
version = "1.0.0"
description = "Advanced ComfyUI nodes for WD14 tagging, image filtering, and CLIP to TensorRT conversion"
readme = "README.md"
requires-python = ">=3.8"
license = {text = "MIT"}
authors = [
    {name = "vovler"},
]
keywords = [
    "comfyui",
    "stable-diffusion", 
    "tensorrt",
    "clip",
    "wd14",
    "image-tagging",
    "ai",
    "machine-learning"
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "Intended Audience :: End Users/Desktop",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Multimedia :: Graphics",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Software Development :: Libraries :: Python Modules",
]

dependencies = [
    "torch>=2.0.0",
    "torchvision>=0.15.0",
    "numpy>=1.21.0",
    "pillow>=8.3.0",
    "opencv-python>=4.5.0",
    "safetensors>=0.3.0",
    "huggingface-hub>=0.16.0",
    "transformers>=4.21.0",
    "onnx>=1.12.0",
    "onnxruntime-gpu>=1.12.0",
    "tensorrt>=8.5.0",
    "cuda-python>=11.7.0",
    "psutil>=5.8.0",
    "tqdm>=4.64.0",
    "requests>=2.28.0",
    "packaging>=21.3",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "black>=22.0.0",
    "isort>=5.10.0",
    "flake8>=5.0.0",
    "mypy>=0.991",
    "pre-commit>=2.20.0",
]
test = [
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "pytest-mock>=3.8.0",
    "pytest-xdist>=2.5.0",
]
docs = [
    "sphinx>=5.0.0",
    "sphinx-rtd-theme>=1.0.0",
    "myst-parser>=0.18.0",
]
tensorrt-dev = [
    "tensorrt>=10.0.0",
    "pycuda>=2022.1",
    "cuda-python>=12.0.0",
]

[project.urls]
Homepage = "https://github.com/vovler/ComfyUI-vovlerTools"
Documentation = "https://github.com/vovler/ComfyUI-vovlerTools/wiki"
Repository = "https://github.com/vovler/ComfyUI-vovlerTools"
"Bug Tracker" = "https://github.com/vovler/ComfyUI-vovlerTools/issues"
Changelog = "https://github.com/vovler/ComfyUI-vovlerTools/blob/main/CHANGELOG.md"

[tool.setuptools]
packages = ["comfyui_vovlertools"]
include-package-data = true

[tool.setuptools.package-data]
comfyui_vovlertools = [
    "*.py",
    "*.json",
    "*.yaml",
    "*.yml",
    "*.txt",
    "*.md",
]

# Black formatting configuration
[tool.black]
line-length = 120
target-version = ["py38", "py39", "py310", "py311", "py312"]
include = '\.pyi?$'
extend-exclude = '''
/(
    \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | _build
  | buck-out
  | build
  | dist
  | venv
)/
'''

# isort import sorting configuration
[tool.isort]
profile = "black"
line_length = 120
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
skip_gitignore = true
known_first_party = ["comfyui_vovlertools"]
known_third_party = [
    "torch",
    "torchvision", 
    "numpy",
    "PIL",
    "cv2",
    "tensorrt",
    "onnx",
    "transformers",
    "safetensors",
    "comfy",
]

# Flake8 linting configuration
[tool.flake8]
max-line-length = 120
extend-ignore = [
    "E203",  # whitespace before ':'
    "E501",  # line too long (handled by black)
    "W503",  # line break before binary operator
    "W504",  # line break after binary operator
]
exclude = [
    ".git",
    "__pycache__",
    "build",
    "dist",
    "*.egg-info",
    ".venv",
    "venv",
    ".tox",
    ".mypy_cache",
]
per-file-ignores = [
    "__init__.py:F401",  # imported but unused
]

# MyPy type checking configuration
[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = false
disallow_incomplete_defs = false
check_untyped_defs = true
disallow_untyped_decorators = false
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = [
    "tensorrt.*",
    "onnx.*",
    "cv2.*",
    "comfy.*",
    "folder_paths.*",
]
ignore_missing_imports = true

# Pytest configuration
[tool.pytest.ini_options]
minversion = "7.0"
addopts = [
    "-ra",
    "--strict-markers",
    "--strict-config",
    "--cov=comfyui_vovlertools",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
]
testpaths = ["tests"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "gpu: marks tests that require GPU",
    "tensorrt: marks tests that require TensorRT",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]
filterwarnings = [
    "ignore::DeprecationWarning",
    "ignore::PendingDeprecationWarning",
]

# Coverage configuration
[tool.coverage.run]
source = ["comfyui_vovlertools"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
    "*/venv/*",
    "*/build/*",
    "*/dist/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

# Ruff linting and formatting (alternative to flake8/black)
[tool.ruff]
target-version = "py38"
line-length = 120
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
]

[tool.ruff.per-file-ignores]
"__init__.py" = ["F401"]

# Pre-commit hooks configuration
[tool.pre-commit]
repos = [
    {
        repo = "https://github.com/pre-commit/pre-commit-hooks",
        rev = "v4.4.0",
        hooks = [
            {id = "trailing-whitespace"},
            {id = "end-of-file-fixer"},
            {id = "check-yaml"},
            {id = "check-added-large-files"},
            {id = "check-merge-conflict"},
        ]
    },
    {
        repo = "https://github.com/psf/black",
        rev = "22.12.0",
        hooks = [
            {id = "black"}
        ]
    },
    {
        repo = "https://github.com/pycqa/isort",
        rev = "5.12.0",
        hooks = [
            {id = "isort"}
        ]
    },
    {
        repo = "https://github.com/charliermarsh/ruff-pre-commit",
        rev = "v0.0.254",
        hooks = [
            {id = "ruff", args = ["--fix"]}
        ]
    },
]
